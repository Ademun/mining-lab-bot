package cmd

import (
	"fmt"
	"strings"
	"time"

	"github.com/Ademun/mining-lab-bot/pkg/metrics"
	"github.com/Ademun/mining-lab-bot/pkg/model"
)

func startMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>–ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>")
	return sb.String()
}

func helpMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üìñ –°–ø—Ä–∞–≤–∫–∞</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>üìù –ü–æ–¥–ø–∏—Å–∫–∞:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>/sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>/unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt; - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>")
	return sb.String()
}

func subInvalidArgumentsMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;</b>")
	return sb.String()
}

func subLabNumberValidationErrorMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–æ–º–µ—Ä –ª–∞–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 999</b>")
	return sb.String()
}

func subAuditoriumNumberValidationErrorMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 999</b>")
	return sb.String()
}

func subCreationErrorMessage(err error) string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>%s</b>", err.Error()))
	return sb.String()
}

func subCreationSuccessMessage(labNumber, labAuditorium int) string {
	var sb strings.Builder
	sb.WriteString("<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>üìö –õ–∞–±–∞ ‚Ññ%d</b>", labNumber))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è ‚Ññ%d</b>", labAuditorium))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∑–∞–ø–∏—Å—å</b>")
	return sb.String()
}

func unsubInvalidArgumentsMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt;</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list</b>")
	return sb.String()
}

func unsubInvalidSubNumberMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>")
	return sb.String()
}

func unsubSubNumberValidationErrorMessage(subsLen int) string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("<b>‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ —á–∏—Å–ª–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - %d</b>", subsLen))
	return sb.String()
}

func subsFetchingErrorMessage(err error) string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>%s</b>", err.Error()))
	return sb.String()
}

func unsubErrorMessage(err error) string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>%s</b>", err.Error()))
	return sb.String()
}

func unsubSuccessMessage(labNumber, labAuditorium int) string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–∞–±—É ‚Ññ%d –≤ –∞—É–¥. ‚Ññ%d", labNumber, labAuditorium))
	return sb.String()
}

func listEmptySubsMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üîç –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ª–∞–±—ã.</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;")
	return sb.String()
}

func listSubsSuccessMessage(subs []model.Subscription) string {
	var sb strings.Builder
	sb.WriteString("<b>üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
	sb.WriteString(repeatLineBreaks(2))
	for idx, sub := range subs {
		sb.WriteString(fmt.Sprintf("<b>%d. –õ–∞–±–∞ ‚Ññ%d, –∞—É–¥. ‚Ññ%d</b>", idx+1, sub.LabNumber, sub.LabAuditorium))
		if idx == len(subs)-1 {
			break
		}
		sb.WriteString(repeatLineBreaks(2))
	}
	return sb.String()
}

func permissionDeniedErrorMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>")
	return sb.String()
}

func statsSuccessMessage(snapshot *metrics.Metrics) string {
	uptime := time.Since(snapshot.StartTime)
	var sb strings.Builder
	sb.WriteString("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üïê –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> ")
	sb.WriteString(formatDuration(uptime))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üîç –û–ø—Ä–æ—Å—ã:</b>")
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: <b>%d</b>", snapshot.PollingMetrics.TotalPolls))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –†–µ–∂–∏–º: <b>%s</b>", formatPollingMode(snapshot.PollingMetrics.Mode)))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: <b>%d</b>", snapshot.PollingMetrics.ParsingErrors))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –û—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è: <b>%d</b>", snapshot.PollingMetrics.FetchErrors))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: <b>%s</b>", snapshot.PollingMetrics.AveragePollingTime.Round(time.Millisecond)))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: <b>%d</b>", snapshot.PollingMetrics.AverageSlotNumber))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>")
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>%d</b>", snapshot.NotificationMetrics.TotalNotifications))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –†–∞–∑–º–µ—Ä –∫–µ—à–∞: <b>%d</b>", snapshot.NotificationMetrics.CacheLength))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>%d</b>", snapshot.NotificationMetrics.AverageNotifications))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üìù –ü–æ–¥–ø–∏—Å–∫–∏:</b>")
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>%d</b>", snapshot.SubscriptionMetrics.TotalSubscriptions))
	return sb.String()
}

func notifySuccessMessage(slot *model.Slot) string {
	var sb strings.Builder
	sb.WriteString("<b>üî• –ü–æ—è–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å!</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString(fmt.Sprintf("<b>üìö –õ–∞–±–∞ ‚Ññ%d. %s</b>", slot.LabNumber, slot.LabName))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è ‚Ññ%d</b>", slot.LabAuditorium))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üóìÔ∏è –ö–æ–≥–¥–∞:</b>")
	sb.WriteString(repeatLineBreaks(2))
	for idx, dateTime := range slot.Available {
		sb.WriteString(fmt.Sprintf("<b>%d. %s</b>", idx+1, formatDateTime(dateTime)))
		sb.WriteString(repeatLineBreaks(2))
	}
	sb.WriteString(fmt.Sprintf("<b>üîó <a href='%s'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å</a></b>", slot.URL))
	return sb.String()
}

func repeatLineBreaks(breaks int) string {
	var sb strings.Builder
	for range breaks {
		sb.WriteString("\n")
	}
	return sb.String()
}
