package cmd

import (
	"fmt"

	"github.com/Ademun/mining-lab-bot/pkg/model"
	"github.com/go-telegram/bot/models"
)

func selectLabDomainKbd() *models.InlineKeyboardMarkup {
	return &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{{Text: "–ú–µ—Ö–∞–Ω–∏–∫–∞", CallbackData: "lab_creation:domain:mechanics"}},
			{{Text: "–í–∏—Ä—Ç—É–∞–ª–∫–∞", CallbackData: "lab_creation:domain:virtual"}},
			{{Text: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", CallbackData: "lab_creation:domain:electricity"}},
		},
	}
}

func selectLabWeekdayKbd() *models.InlineKeyboardMarkup {
	return &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{{Text: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", CallbackData: "lab_creation:weekday:1"}},
			{{Text: "–í—Ç–æ—Ä–Ω–∏–∫", CallbackData: "lab_creation:weekday:2"}},
			{{Text: "–°—Ä–µ–¥–∞", CallbackData: "lab_creation:weekday:3"}},
			{{Text: "–ß–µ—Ç–≤–µ—Ä–≥", CallbackData: "lab_creation:weekday:4"}},
			{{Text: "–ü—è—Ç–Ω–∏—Ü–∞", CallbackData: "lab_creation:weekday:5"}},
			{{Text: "–°—É–±–±–æ—Ç–∞", CallbackData: "lab_creation:weekday:6"}},
			{{Text: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", CallbackData: "lab_creation:weekday:0"}},
			{{Text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", CallbackData: "lab_creation:weekday:skip"}},
		},
	}
}

type Lesson struct {
	Text         string
	CallbackData string
}

var defaultLessons = []Lesson{
	{Text: "08:50 - 10:20 - 1Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:1"},
	{Text: "10:35 - 12:05 - 2Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:2"},
	{Text: "12:35 - 14:05 - 3Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:3"},
	{Text: "14:15 - 15:45 - 4Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:4"},
	{Text: "15:55 - 17:20 - 5Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:5"},
	{Text: "17:30 - 19:00 - 6Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:6"},
	{Text: "19:10 - 20:30 - 7Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:7"},
	{Text: "20:40 - 22:00 - 8Ô∏è‚É£ –ø–∞—Ä–∞", CallbackData: "lab_creation:lesson:8"},
}

func selectLessonKbd(lessons []Lesson) *models.InlineKeyboardMarkup {
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: make([][]models.InlineKeyboardButton, len(lessons)),
	}
	for idx, lesson := range lessons {
		keyboard.InlineKeyboard[idx] = []models.InlineKeyboardButton{
			{Text: lesson.Text, CallbackData: lesson.CallbackData},
		}
	}

	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []models.InlineKeyboardButton{
		{Text: "‚úÖ –ì–æ—Ç–æ–≤–æ", CallbackData: "lab_creation:lesson:skip"},
	})

	return keyboard
}

func askLabConfirmationKbd() *models.InlineKeyboardMarkup {
	return &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "‚úÖ –°–æ–∑–¥–∞—Ç—å", CallbackData: "lab_creation:confirm:create"},
				{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: "lab_creation:confirm:cancel"},
			},
		},
	}
}

func createUnsubKeyboard(subs []model.Subscription) *models.InlineKeyboardMarkup {
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{},
	}
	for _, sub := range subs {
		label := fmt.Sprintf("–õ–∞–±–∞ ‚Ññ%d, –∞—É–¥. ‚Ññ%d", sub.LabNumber, sub.LabAuditorium)
		var timeString string
		if sub.Weekday != nil && sub.DayTime != nil {
			timeString = fmt.Sprintf(", %s %s", weekDayLocale[int(*sub.Weekday)], timeLessonMap[*sub.DayTime])
		} else {
			timeString = ", –õ—é–±–æ–µ –≤—Ä–µ–º—è"
		}
		label += timeString
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard,
			[]models.InlineKeyboardButton{
				{Text: label, CallbackData: fmt.Sprintf("unsub:delete:%s", sub.UUID)},
			})
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard,
		[]models.InlineKeyboardButton{
			{Text: "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", CallbackData: "unsub:all"},
		})
	return keyboard
}

func createDeleteAllConfirmKeyboard() *models.InlineKeyboardMarkup {
	return &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", CallbackData: "unsub:all:confirm"},
				{Text: "‚ùå –ù–µ—Ç", CallbackData: "unsub:all:cancel"},
			},
		},
	}
}

func createLinkKeyboard(url string) *models.InlineKeyboardMarkup {
	return &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "üîó –ó–ê–ü–ò–°–ê–¢–¨–°–Ø", URL: url},
			},
		},
	}
}
