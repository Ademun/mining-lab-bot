package cmd

import (
	"fmt"
	"sort"
	"strings"
	"time"

	"github.com/Ademun/mining-lab-bot/internal/subscription"
	"github.com/Ademun/mining-lab-bot/pkg/metrics"
	"github.com/Ademun/mining-lab-bot/pkg/model"
)

func askLabNumberMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>üìö –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–ù–∞–ø—Ä–∏–º–µ—Ä: 7")
	return sb.String()
}

func askLabAuditoriumMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>üö™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–ù–∞–ø—Ä–∏–º–µ—Ä: 233")
	return sb.String()
}

func askLabDomainMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>‚öõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
	return sb.String()
}

func askLabWeekdayMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –≤–∞–∂–µ–Ω")
	return sb.String()
}

func askLabLessonMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>üïê –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è</b>")
	return sb.String()
}

func askLabConfirmationMsg(data *subscription.RequestSubscription) string {

	var sb strings.Builder
	sb.WriteString("<b>‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>üìö –õ–∞–±–∞: %d. %s</b>", data.LabNumber, data.Type.String()))
	sb.WriteString(repeatLineBreaks(2))
	if data.LabAuditorium != nil {
		sb.WriteString(fmt.Sprintf("<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> %d", data.LabAuditorium))
	} else if data.LabDomain != nil {
		sb.WriteString(fmt.Sprintf("<b>‚öõÔ∏è %s</b>", data.LabDomain))
	}
	sb.WriteString(repeatLineBreaks(2))

	if data.Weekday != nil {
		sb.WriteString(repeatLineBreaks(2))
		sb.WriteString(fmt.Sprintf("<b>üìÖ –î–µ–Ω—å:</b> %s", weekDayLocale[*data.Weekday]))
	}

	if data.Lessons != nil {
		sb.WriteString(repeatLineBreaks(2))
		sb.WriteString(fmt.Sprintf("<b>üïê –í—Ä–µ–º—è:</b>"))
		for _, lesson := range data.Lessons {
			sb.WriteString(fmt.Sprintf("<b>%s</b>", defaultLessons[lesson-1].Text))
		}
	}

	return sb.String()
}

func genericServiceErrorMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>")
	return sb.String()
}

func labNumberValidationErrorMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–æ–º–µ—Ä –ª–∞–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 999</b>")
	return sb.String()
}

func labAuditoriumValidationErrorMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 999</b>")
	return sb.String()
}

func startMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>–ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è </b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>")
	return sb.String()
}

func helpMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üìñ –°–ø—Ä–∞–≤–∫–∞</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>üìù –ü–æ–¥–ø–∏—Å–∫–∞:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>/sub - —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>")
	sb.WriteString(repeatLineBreaks(3))
	sb.WriteString("<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>/unsub - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>")
	return sb.String()
}

var weekDayLocale = map[int]string{
	0: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
	1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	2: "–í—Ç–æ—Ä–Ω–∏–∫",
	3: "–°—Ä–µ–¥–∞",
	4: "–ß–µ—Ç–≤–µ—Ä–≥",
	5: "–ü—è—Ç–Ω–∏—Ü–∞",
	6: "–°—É–±–±–æ—Ç–∞",
}

func subCreationCancelledMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>")
	return sb.String()
}

func subCreationErrorMessage(err error) string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>%s</b>", err.Error()))
	return sb.String()
}

func subCreationSuccessMsg() string {
	var sb strings.Builder
	sb.WriteString("<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∑–∞–ø–∏—Å—å</b>")
	return sb.String()
}

func unsubEmptyListMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üîç –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ª–∞–±—ã</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sub –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	return sb.String()
}

func unsubSelectMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>")
	return sb.String()
}

func unsubConfirmDeleteAllMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏?</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å")
	return sb.String()
}

func unsubDeleteAllSuccessMessage(count int) string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("<b>‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: %d</b>", count))
	return sb.String()
}

func subsFetchingErrorMessage(err error) string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>%s</b>", err.Error()))
	return sb.String()
}

func unsubErrorMessage(err error) string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>%s</b>", err.Error()))
	return sb.String()
}

func unsubSuccessMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –ª–∞–±—É</b>")
	return sb.String()
}

func listEmptySubsMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>üîç –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ª–∞–±—ã</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sub –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
	return sb.String()
}

func listSubsSuccessMessage(subs []model.Subscription) string {
	var sb strings.Builder
	sb.WriteString("<b>üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
	sb.WriteString(repeatLineBreaks(2))
	for idx, sub := range subs {
		label := fmt.Sprintf("–õ–∞–±–∞ ‚Ññ%d, –∞—É–¥. ‚Ññ%d", sub.LabNumber, sub.LabAuditorium)
		var timeString string
		if sub.Weekday != nil && sub.DayTime != nil {
			timeString = fmt.Sprintf(", %s %s", weekDayLocale[int(*sub.Weekday)], timeLessonMap[*sub.DayTime])
		} else {
			timeString = ", –õ—é–±–æ–µ –≤—Ä–µ–º—è"
		}
		label += timeString
		sb.WriteString(fmt.Sprintf("<b>‚Ä¢ %s</b>", label))
		if idx == len(subs)-1 {
			break
		}
		sb.WriteString(repeatLineBreaks(2))
	}
	return sb.String()
}

func permissionDeniedErrorMessage() string {
	var sb strings.Builder
	sb.WriteString("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>")
	return sb.String()
}

func statsSuccessMessage(snapshot *metrics.Metrics) string {
	uptime := time.Since(snapshot.StartTime)
	var sb strings.Builder
	sb.WriteString("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞</b>")
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üïê –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> ")
	sb.WriteString(formatDuration(uptime))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üîç –û–ø—Ä–æ—Å—ã:</b>")
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: <b>%d</b>",
		snapshot.PollingMetrics.TotalPolls))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –†–µ–∂–∏–º: <b>%s</b>",
		formatPollingMode(snapshot.PollingMetrics.Mode)))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: <b>%d</b>",
		snapshot.PollingMetrics.ParsingErrors))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –û—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è: <b>%d</b>",
		snapshot.PollingMetrics.FetchErrors))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: <b>%s</b>",
		snapshot.PollingMetrics.LastPollingTime.Round(time.Millisecond)))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: <b>%d</b>",
		snapshot.PollingMetrics.LastSlotNumber))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("	 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ <b>%d</b>", snapshot.PollingMetrics.LastIDNumber))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>")
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>%d</b>",
		snapshot.NotificationMetrics.TotalNotifications))
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –†–∞–∑–º–µ—Ä –∫–µ—à–∞: <b>%d</b>",
		snapshot.NotificationMetrics.CacheLength))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üìù –ü–æ–¥–ø–∏—Å–∫–∏:</b>")
	sb.WriteString(repeatLineBreaks(1))
	sb.WriteString(fmt.Sprintf("  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>%d</b>",
		snapshot.SubscriptionMetrics.TotalSubscriptions))
	return sb.String()
}

var timeLessonMap = map[string]string{
	"08:50": "1Ô∏è‚É£ 08:50 - 10:20",
	"10:35": "2Ô∏è‚É£ 10:35 - 12:05",
	"12:35": "3Ô∏è‚É£ 12:35 - 14:05",
	"14:15": "4Ô∏è‚É£ 14:15 - 15:45",
	"15:55": "5Ô∏è‚É£ 15:55 - 17:20",
	"17:30": "6Ô∏è‚É£ 17:30 - 19:00",
	"19:10": "7Ô∏è‚É£ 19:10 - 20:30",
	"20:40": "8Ô∏è‚É£ 20:40 - 22:00",
}

func notifySuccessMessage(notif *model.Notification) string {
	slot := &notif.Slot
	var sb strings.Builder
	sb.WriteString("<b>üî• –ü–æ—è–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å!</b>")
	sb.WriteString(repeatLineBreaks(3))
	longName := slot.LabName
	if slot.LabOrder != 0 {
		longName += fmt.Sprintf(" (%d-–æ–µ –º–µ—Å—Ç–æ)", slot.LabOrder)
	}
	sb.WriteString(fmt.Sprintf("<b>üìö –õ–∞–±–∞ ‚Ññ%d. %s</b>", slot.LabNumber, longName))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString(fmt.Sprintf("<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è ‚Ññ%d</b>", slot.LabAuditorium))
	sb.WriteString(repeatLineBreaks(2))
	sb.WriteString("<b>üóìÔ∏è –ö–æ–≥–¥–∞:</b>")
	sb.WriteString(repeatLineBreaks(1))
	writeSlotsInfo(slot, &sb, notif.PreferredTimes)
	return sb.String()
}

func writeSlotsInfo(slot *model.Slot, sb *strings.Builder, preferredTimes []model.PreferredTime) {
	available := formatAvailableSlots(slot.Available)

	keys := sortDatesByPreference(available, preferredTimes)

	preferredSet := make(map[string]bool)
	for _, pt := range preferredTimes {
		key := fmt.Sprintf("%d_%s", pt.Weekday, pt.DayTime)
		preferredSet[key] = true
	}

	for _, k := range keys {
		val := available[k]
		parsedTime, _ := time.Parse("2006-01-02", k)
		relativeDate := formatDateRelative(parsedTime, time.Now())

		sb.WriteString(fmt.Sprintf("<b>‚†Ä‚†Ä%s:</b>", relativeDate))
		sb.WriteString(repeatLineBreaks(1))

		sortedSlots := sortSlotsByPreference(val, preferredTimes, parsedTime.Weekday())

		for idx, v := range sortedSlots {
			timeStart := v.Time.Format("15:04")
			timePart := timeLessonMap[timeStart]
			teacherPart := make([]string, len(v.Teachers))
			for idx, teacher := range v.Teachers {
				teacherPart[idx] = teacher.Name
			}

			preferredKey := fmt.Sprintf("%d_%s", parsedTime.Weekday(), timeStart)
			isPreferredSlot := preferredSet[preferredKey]

			if isPreferredSlot {
				sb.WriteString(fmt.Sprintf("<b>‚†Ä‚†Ä%s %s ‚≠êÔ∏è–í–∞—à–µ –≤—Ä–µ–º—è</b>", timePart, strings.Join(teacherPart, ", ")))
			} else {
				sb.WriteString(fmt.Sprintf("<b>‚†Ä‚†Ä%s %s</b>", timePart, strings.Join(teacherPart, ", ")))
			}

			if idx != len(sortedSlots)-1 {
				sb.WriteString(repeatLineBreaks(1))
			}
		}
		sb.WriteString(repeatLineBreaks(2))
	}
}

func sortDatesByPreference(available map[string][]model.TimeTeachers, preferredTimes []model.PreferredTime) []string {
	keys := make([]string, 0, len(available))
	for k := range available {
		keys = append(keys, k)
	}

	preferredWeekdays := make(map[time.Weekday]bool)
	for _, pt := range preferredTimes {
		preferredWeekdays[pt.Weekday] = true
	}

	sort.Slice(keys, func(i, j int) bool {
		dateI, _ := time.Parse("2006-01-02", keys[i])
		dateJ, _ := time.Parse("2006-01-02", keys[j])

		isPreferredI := preferredWeekdays[dateI.Weekday()]
		isPreferredJ := preferredWeekdays[dateJ.Weekday()]

		if isPreferredI && !isPreferredJ {
			return true
		}
		if !isPreferredI && isPreferredJ {
			return false
		}

		return dateI.Before(dateJ)
	})

	return keys
}

func sortSlotsByPreference(slots []model.TimeTeachers, preferredTimes []model.PreferredTime, dateWeekday time.Weekday) []model.TimeTeachers {
	sorted := make([]model.TimeTeachers, len(slots))
	copy(sorted, slots)

	// –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
	preferredDayTimes := make(map[string]bool)
	for _, pt := range preferredTimes {
		if pt.Weekday == dateWeekday {
			preferredDayTimes[pt.DayTime] = true
		}
	}

	if len(preferredDayTimes) == 0 {
		sort.Slice(sorted, func(i, j int) bool {
			return sorted[i].Time.Before(sorted[j].Time)
		})
		return sorted
	}

	sort.Slice(sorted, func(i, j int) bool {
		timeI := sorted[i].Time.Format("15:04")
		timeJ := sorted[j].Time.Format("15:04")

		isPreferredI := preferredDayTimes[timeI]
		isPreferredJ := preferredDayTimes[timeJ]

		if isPreferredI && !isPreferredJ {
			return true
		}
		if !isPreferredI && isPreferredJ {
			return false
		}

		return sorted[i].Time.Before(sorted[j].Time)
	})

	return sorted
}

func repeatLineBreaks(breaks int) string {
	var sb strings.Builder
	for range breaks {
		sb.WriteString("\n")
	}
	return sb.String()
}
