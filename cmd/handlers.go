package cmd

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/Ademun/mining-lab-bot/pkg/event"
	"github.com/Ademun/mining-lab-bot/pkg/metrics"
	"github.com/Ademun/mining-lab-bot/pkg/model"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/google/uuid"
)

func (b *Bot) helpHandler(ctx context.Context, api *bot.Bot, update *models.Update) {
	api.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: "<b>üìñ –°–ø—Ä–∞–≤–∫–∞\n\n\n</b>" +
			"<b>üìù –ü–æ–¥–ø–∏—Å–∫–∞:\n\n</b>" +
			"<b>/sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;\n\n\n</b>" +
			"<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n</b>" +
			"<b>/unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt; - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n\n\n</b>" +
			"<b>/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n\n\n</b>",
		ParseMode: models.ParseModeHTML,
	})
}

func (b *Bot) subscribeHandler(ctx context.Context, api *bot.Bot, update *models.Update) {
	args := strings.Split(update.Message.Text, " ")[1:]
	if len(args) != 2 {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	var labNumber, labAuditorium int

	num, err := strconv.Atoi(args[0])
	if err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–æ–º–µ—Ä –ª–∞–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}
	labNumber = num

	num, err = strconv.Atoi(args[1])
	if err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–æ–º–µ—Ä –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}
	labAuditorium = num

	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	sub := model.Subscription{
		UUID:          uuid.New().String(),
		UserID:        int(userID),
		ChatID:        int(chatID),
		LabNumber:     labNumber,
		LabAuditorium: labAuditorium,
	}

	if err := b.subscriptionService.Subscribe(ctx, sub); err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n%s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	api.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(
			"<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n</b>"+
				"<b>üìö –õ–∞–±–∞ ‚Ññ%d\n\n</b>"+
				"<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è ‚Ññ%d\n\n</b>"+
				"<b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∑–∞–ø–∏—Å—å</b>",
			labNumber, labAuditorium,
		),
		ParseMode: models.ParseModeHTML,
	})

	b.notificationService.CheckCurrentSlots(ctx, sub)
}

func (b *Bot) unsubscribeHandler(ctx context.Context, api *bot.Bot, update *models.Update) {
	args := strings.Split(update.Message.Text, " ")[1:]
	if len(args) != 1 {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt;\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	subIdx, err := strconv.Atoi(args[0])
	if err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	chatID := update.Message.Chat.ID

	subs, err := b.subscriptionService.FindSubscriptionsByChatID(ctx, int(chatID))
	if err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n %s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	if subIdx > len(subs) || subIdx < 1 {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ —á–∏—Å–ª–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - %d</b>", len(subs)),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	targetSub := subs[subIdx-1]
	if err := b.subscriptionService.Unsubscribe(ctx, targetSub.UUID); err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:\n\n%s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}
	api.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(
			"‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–∞–±—É ‚Ññ%d –≤ –∞—É–¥. ‚Ññ%d",
			targetSub.LabNumber, targetSub.LabAuditorium,
		),
		ParseMode: models.ParseModeHTML,
	})
}

func (b *Bot) listHandler(ctx context.Context, api *bot.Bot, update *models.Update) {
	chatID := update.Message.Chat.ID
	subs, err := b.subscriptionService.FindSubscriptionsByChatID(ctx, int(chatID))
	if err != nil {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n %s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	if len(subs) == 0 {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "üîç –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ª–∞–±—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	entries := strings.Builder{}
	for idx, sub := range subs {
		entries.WriteString(fmt.Sprintf("<b>%d. –õ–∞–±–∞ ‚Ññ%d, –∞—É–¥. ‚Ññ%d\n\n</b>", idx+1, sub.LabNumber, sub.LabAuditorium))
	}

	api.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      "<b>üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n</b>" + entries.String() + "<b>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt;</b>",
		ParseMode: models.ParseModeHTML,
	})
}

func (b *Bot) statsHandler(ctx context.Context, api *bot.Bot, update *models.Update) {
	if int(update.Message.From.ID) != b.options.AdminID {
		api.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>"),
			ParseMode: models.ParseModeHTML,
		})
	}

	snapshot := metrics.Global().Snapshot()
	uptime := time.Since(snapshot.StartTime)

	statsText := strings.Builder{}
	statsText.WriteString("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n</b>")

	statsText.WriteString("<b>üïê –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> ")
	statsText.WriteString(formatDuration(uptime))
	statsText.WriteString("\n\n")

	statsText.WriteString("<b>üîç –û–ø—Ä–æ—Å—ã:\n</b>")
	statsText.WriteString(fmt.Sprintf("  –í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: <b>%d</b>\n", snapshot.PollingMetrics.TotalPolls))
	statsText.WriteString(fmt.Sprintf("  –†–µ–∂–∏–º: <b>%s</b>\n", formatPollingMode(snapshot.PollingMetrics.Mode)))
	statsText.WriteString(fmt.Sprintf("  –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: <b>%d</b>\n", snapshot.PollingMetrics.ParsingErrors))
	statsText.WriteString(fmt.Sprintf("  –û—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è: <b>%d</b>\n", snapshot.PollingMetrics.FetchErrors))
	statsText.WriteString(fmt.Sprintf("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: <b>%s</b>\n", snapshot.PollingMetrics.AveragePollingTime.Round(time.Millisecond)))
	statsText.WriteString(fmt.Sprintf("  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: <b>%d</b>\n\n", snapshot.PollingMetrics.AverageSlotNumber))

	statsText.WriteString("<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n</b>")
	statsText.WriteString(fmt.Sprintf("  –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>%d</b>\n", snapshot.NotificationMetrics.TotalNotifications))
	statsText.WriteString(fmt.Sprintf("  –†–∞–∑–º–µ—Ä –∫–µ—à–∞: <b>%d</b>\n", snapshot.NotificationMetrics.CacheLength))
	statsText.WriteString(fmt.Sprintf("  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>%d</b>\n\n", snapshot.NotificationMetrics.AverageNotifications))

	statsText.WriteString("<b>üìù –ü–æ–¥–ø–∏—Å–∫–∏:\n</b>")
	statsText.WriteString(fmt.Sprintf("  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>%d</b>", snapshot.SubscriptionMetrics.TotalSubscriptions))

	api.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      statsText.String(),
		ParseMode: models.ParseModeHTML,
	})
}

func (b *Bot) notifyHandler(ctx context.Context, notifEvent event.NewNotificationEvent) {
	targetUser := notifEvent.Notification.ChatID
	slot := notifEvent.Notification.Slot

	b.api.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: targetUser,
		Text: fmt.Sprintf("<b>üî• –ü–æ—è–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å!\n\n\n</b>"+
			"<b>üìö –õ–∞–±–∞ ‚Ññ%d. %s\n\n</b>"+
			"<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è ‚Ññ%d\n\n</b>"+
			"<b>üóìÔ∏è –ö–æ–≥–¥–∞: %s\n\n</b>"+
			"<b>üîó <a href='%s'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å</a></b>",
			slot.LabNumber, slot.LabName, slot.LabAuditorium, formatDateTime(slot.DateTime), slot.URL),
		ParseMode: models.ParseModeHTML,
	})
}
