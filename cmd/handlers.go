package cmd

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/Ademun/mining-lab-bot/pkg/model"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/google/uuid"
)

func (bt *Bot) helpHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.ID,
		Text: "<b>üìñ –°–ø—Ä–∞–≤–∫–∞\n\n\n</b>" +
			"<b>üìù –ü–æ–¥–ø–∏—Å–∫–∞:\n\n</b>" +
			"<b>/sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;</b>\n\n\n" +
			"<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n</b>" +
			"<b>/unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt; - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è</b>\n\n\n" +
			"<b>/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n\n",
		ParseMode: models.ParseModeHTML,
	})
}

func (bt *Bot) subscribeHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	args := strings.Split(update.Message.Text, " ")[1:]
	if len(args) != 2 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	var labNumber, labAuditorium int

	if num, err := strconv.Atoi(args[0]); err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–æ–º–µ—Ä –ª–∞–±—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	} else {
		labNumber = num
	}

	if num, err := strconv.Atoi(args[1]); err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–æ–º–µ—Ä –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	} else {
		labAuditorium = num
	}

	userID := update.Message.From.ID

	sub := model.Subscription{
		UUID:          uuid.New().String(),
		UserID:        int(userID),
		LabNumber:     labNumber,
		LabAuditorium: labAuditorium,
	}

	if err := bt.subService.Subscribe(ctx, sub); err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n%s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(
			"<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n</b>"+
				"<b>üìö –õ–∞–±–∞ ‚Ññ%d\n\n</b>"+
				"<b>üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è ‚Ññ%d\n\n</b>"+
				"<b>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è –∑–∞–ø–∏—Å—å</b>",
			labNumber, labAuditorium,
		),
		ParseMode: models.ParseModeHTML,
	})
}

func (bt *Bot) unsubscribeHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	args := strings.Split(update.Message.Text, " ")[1:]
	if len(args) != 1 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt;\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	subIdx, err := strconv.Atoi(args[0])
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "<b>‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	userID := update.Message.From.ID
	subs, err := bt.subService.ListForUser(ctx, int(userID))
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n %s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	if subIdx > len(subs) || subIdx < 1 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ù–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ —á–∏—Å–ª–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - %d</b>", len(subs)),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	targetSub := subs[subIdx-1]
	if err := bt.subService.Unsubscribe(ctx, targetSub.UUID); err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:\n\n%s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: fmt.Sprintf(
			"‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–∞–±—É ‚Ññ%d –≤ –∞—É–¥. ‚Ññ%d",
			targetSub.LabNumber, targetSub.LabAuditorium,
		),
		ParseMode: models.ParseModeHTML,
	})
}

func (bt *Bot) listHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userID := update.Message.From.ID
	subs, err := bt.subService.ListForUser(ctx, int(userID))
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      fmt.Sprintf("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n %s</b>", err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	if len(subs) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      "üîç –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ª–∞–±—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sub &lt;–Ω–æ–º–µ—Ä –ª–∞–±—ã&gt; &lt;–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏&gt;",
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	entries := strings.Builder{}
	for idx, sub := range subs {
		entries.WriteString(fmt.Sprintf("<b>%d. –õ–∞–±–∞ ‚Ññ%d, –∞—É–¥. ‚Ññ%d\n\n</b>", idx+1, sub.LabNumber, sub.LabAuditorium))
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      "<b>üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n</b>" + entries.String() + "<b>–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsub &lt;–Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–ø–∏—Å–∫–µ&gt;</b>",
		ParseMode: models.ParseModeHTML,
	})
}
