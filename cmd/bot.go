package cmd

import (
	"context"
	"fmt"

	"github.com/Ademun/mining-lab-bot/internal/notification"
	"github.com/Ademun/mining-lab-bot/internal/subscription"
	"github.com/Ademun/mining-lab-bot/pkg/config"
	"github.com/Ademun/mining-lab-bot/pkg/event"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type Bot struct {
	eventBus            *event.Bus
	subscriptionService subscription.SubscriptionService
	notificationService notification.NotificationService
	api                 *bot.Bot
	options             *config.TelegramConfig
}

func NewBot(eb *event.Bus, subService subscription.SubscriptionService, notifService notification.NotificationService, opts *config.TelegramConfig) (*Bot, error) {
	botOpts := []bot.Option{
		bot.WithDefaultHandler(defaultHandler),
	}
	b, err := bot.New(opts.BotToken, botOpts...)
	if err != nil {
		return nil, fmt.Errorf("error creating bot: %w", err)
	}

	return &Bot{
		eventBus:            eb,
		subscriptionService: subService,
		notificationService: notifService,
		api:                 b,
		options:             opts,
	}, nil
}

func (b *Bot) Start(ctx context.Context) {
	b.api.RegisterHandler(bot.HandlerTypeMessageText, "help", bot.MatchTypeCommandStartOnly, b.helpHandler)
	b.api.RegisterHandler(bot.HandlerTypeMessageText, "sub", bot.MatchTypeCommandStartOnly, b.subscribeHandler)
	b.api.RegisterHandler(bot.HandlerTypeMessageText, "unsub", bot.MatchTypeCommandStartOnly, b.unsubscribeHandler)
	b.api.RegisterHandler(bot.HandlerTypeMessageText, "list", bot.MatchTypeCommandStartOnly, b.listHandler)
	b.api.RegisterHandler(bot.HandlerTypeMessageText, "stats", bot.MatchTypeCommandStartOnly, b.statsHandler)

	event.Subscribe(b.eventBus, b.notifyHandler)

	go b.api.Start(ctx)
}

func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: "<b>üëã –ü—Ä–∏–≤–µ—Ç!\n\n\n</b>" + "<b>–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n\n\n</b>" +
			"<b>–ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–∞—è\n\n\n</b>" +
			"<b>–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>",
		ParseMode: models.ParseModeHTML,
	})
}
